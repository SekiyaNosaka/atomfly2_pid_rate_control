#include <math.h>
#include <Arduino.h>
#include <M5Atom.h>
#include "rc.hpp"
#include "sensor.hpp"

uint32_t Freq = 100000;
uint8_t nBits = 8;
uint8_t PIN_FL = 22;
uint8_t PIN_FR = 19;
uint8_t PIN_RL = 23;
uint8_t PIN_RR = 33;
uint8_t PWM_CH_FL = 0;
uint8_t PWM_CH_FR = 1;
uint8_t PWM_CH_RL = 2;
uint8_t PWM_CH_RR = 3;

float limitValue(float val);

void setup()
{
  ledcSetup(PWM_CH_FL, Freq, nBits);
  ledcSetup(PWM_CH_FR, Freq, nBits);
  ledcSetup(PWM_CH_RL, Freq, nBits);
  ledcSetup(PWM_CH_RR, Freq, nBits);
  ledcAttachPin(PIN_FL, PWM_CH_FL);
  ledcAttachPin(PIN_FR, PWM_CH_FR);
  ledcAttachPin(PIN_RL, PWM_CH_RL);
  ledcAttachPin(PIN_RR, PWM_CH_RR);
  rc_init();
  sensor_init();
  Serial.begin(115200); // baudrate: 115200
  delay(1000);
}

float roll;
float pitch;
float yaw;
float thrust_0;
float thrust;
float t1, t2, t3, t4;
float UGAIN = 250.0f;
float CTRL_LIMIT = 0.7f;

float kp = 0.1f;
float ki = 0.005f;
float kd = 0.00001f;

float wp;
float wq;
float wr;
float target_wp = 0.0f;
float target_wq = 0.0f;
float target_wr = 0.0f;
float err_wp = 0.0f;
float err_wq = 0.0f;
float err_wr = 0.0f;
float err_wp_0 = 0.0f;
float err_wq_0 = 0.0f;
float err_wr_0 = 0.0f;
float err_wp_sum = 0.0f;
float err_wq_sum = 0.0f;
float err_wr_sum = 0.0f;
float t = 0.0f;

void loop()
{
  sensor_read();
  roll = Stick[AILERON];
  pitch = Stick[ELEVATOR];
  yaw = Stick[RUDDER];
  thrust_0 = Stick[THROTTLE];
  thrust = 0.0f;
  wp = Wp;
  wq = Wq;
  wr = Wr;
  Serial.printf("%f %f %f %f %f %f\n", roll, pitch, yaw, wp, wq, wr);

  if(thrust_0 > 0.8f){
    thrust_0 = 0.8f;
  }
  if(thrust_0 < 0.0f){
    thrust_0 = 0.0f;
  }
  if(thrust > CTRL_LIMIT){
    thrust = CTRL_LIMIT;
  }
  if(thrust < 0.0f){
    thrust = 0.0f;
  }
  if(roll > CTRL_LIMIT){
    roll = CTRL_LIMIT;
  }
  if(roll < -CTRL_LIMIT){
    roll = -CTRL_LIMIT;
  }
  if(pitch >  CTRL_LIMIT){
    pitch =  CTRL_LIMIT;
  }
  if(pitch < -CTRL_LIMIT){
    pitch = -CTRL_LIMIT;
  }
  if(yaw > CTRL_LIMIT){
    yaw = CTRL_LIMIT;
  }
  if(yaw < -CTRL_LIMIT){
    yaw = -CTRL_LIMIT;
  }

  target_wp = 0.5*PI*roll;
  target_wq = 0.5*PI*pitch;
  target_wr = 0.5*PI*yaw;

  err_wp = target_wp - wp;
  err_wq = target_wq - wq;
  err_wr = target_wr - wr;

  if (t != 3.0){
    err_wp_sum += 0.004*err_wp;
    err_wq_sum += 0.004*err_wq;
    err_wr_sum += 0.004*err_wr;
  }
  else if (t >= 3.0){
    err_wp_sum = 0.0;
    err_wq_sum = 0.0;
    err_wr_sum = 0.0;
    t = 0.0;
  }

  float u_p = kp*(err_wp) + ki*(err_wp_sum) + kd*(err_wp - err_wp_0)/0.004;
  float u_q = kp*(err_wq) + ki*(err_wq_sum) + kd*(err_wq - err_wq_0)/0.004;
  float u_r = kp*(err_wr) + ki*(err_wr_sum) + kd*(err_wr - err_wr_0)/0.004;
  Serial.printf("%f %f %f\n", u_p, u_q, u_r);

  if(thrust_0 > 0.02f){
    t1 = UGAIN*(thrust_0 + (thrust - u_p + u_q - u_r)/4.0);
    t2 = UGAIN*(thrust_0 + (thrust - u_p - u_q + u_r)/4.0);
    t3 = UGAIN*(thrust_0 + (thrust + u_p - u_q - u_r)/4.0);
    t4 = UGAIN*(thrust_0 + (thrust + u_p + u_q + u_r)/4.0);
    /*
    t1 = UGAIN*(thrust_0 + (thrust - u_p + u_q + u_r)/4.0);
    t2 = UGAIN*(thrust_0 + (thrust - u_p - u_q - u_r)/4.0);
    t3 = UGAIN*(thrust_0 + (thrust + u_p - u_q + u_r)/4.0);
    t4 = UGAIN*(thrust_0 + (thrust + u_p + u_q - u_r)/4.0);
    */
  }
  else{
    t1 = 0.0f;
    t2 = 0.0f;
    t3 = 0.0f;
    t4 = 0.0f;
  }
  
  t1 = limitValue(t1);
  t2 = limitValue(t2);
  t3 = limitValue(t3);
  t4 = limitValue(t4);

  ledcWrite(PWM_CH_FR, (uint32_t)t1);
  ledcWrite(PWM_CH_FL, (uint32_t)t4);
  ledcWrite(PWM_CH_RR, (uint32_t)t2);
  ledcWrite(PWM_CH_RL, (uint32_t)t3);

  err_wp_0 = err_wp;
  err_wq_0 = err_wq;
  err_wr_0 = err_wr;

  delay(4);
  t = t + 0.004;
}

float limitValue(float val)
{
  float max_val = pow(2, nBits) - 1;
  float min_val = 0;

  if (val>max_val){
    val = max_val;
  }
  else if (val<min_val){
    val = min_val;
  }
  return val;
}

/*
void loop()
{
  uint8_t t_scale = 240;
  uint8_t r_scale = 8;
  uint8_t p_scale = 8;
  uint8_t y_scale = 8;

  float roll   = Stick[AILERON];
  float pitch  = Stick[ELEVATOR];
  float yaw    = Stick[RUDDER];
  float thrust = Stick[THROTTLE];

  float FL_val = t_scale*thrust + r_scale*roll + p_scale*pitch - y_scale*yaw;
  float FR_val = t_scale*thrust - r_scale*roll + p_scale*pitch + y_scale*yaw;
  float RL_val = t_scale*thrust + r_scale*roll - p_scale*pitch + y_scale*yaw;
  float RR_val = t_scale*thrust - r_scale*roll - p_scale*pitch - y_scale*yaw;

  FL_val = limitRange(FL_val);
  FR_val = limitRange(FR_val);
  RL_val = limitRange(RL_val);
  RR_val = limitRange(RR_val);

  ledcWrite(PWM_CH_FL, (uint8_t)FL_val);
  ledcWrite(PWM_CH_FR, (uint8_t)FR_val);
  ledcWrite(PWM_CH_RL, (uint8_t)RL_val);
  ledcWrite(PWM_CH_RR, (uint8_t)RR_val);

  delay(4);
}
*/

/*
void loop()
{
  int t;
  double T = 2000; // sin波の周期[ms]
  double omega = (2*M_PI)/T; // 角振動数[rad/ms]

  // 実時間の任意周期でのsin波でduty比を変化
  for (t=0; t<=T; t=t+1){
    ledcWrite(PWM_CH_FL, (uint8_t)204*sin(omega*t));
    ledcWrite(PWM_CH_FR, (uint8_t)204*sin(omega*t));
    ledcWrite(PWM_CH_RL, (uint8_t)204*sin(omega*t));
    ledcWrite(PWM_CH_RR, (uint8_t)204*sin(omega*t));
    delay(2); // 2[ms]で可変 (1[ms]だと動作しない)
  }

  delay(4); // 適当にループ待機
}
*/